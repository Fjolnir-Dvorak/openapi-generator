#!/bin/bash
# this bash script run the scripts for the 'mature' generators and those referenced in pom.xml
# it ensures that all changes are committed into the 'samples/' folder


# change the working directory to the directory the script is located in.
# This snipped does not work if this file is sourced or called over $PATH
scriptDir=${0%/*}
if [[ "$scriptDir" != "$0" ]]; then
    cd $scriptDir
fi
scriptDir=$(pwd)

projectDir=$scriptDir/../../
cd $projectDir
projectDir=$(pwd)


echo "# START SCRIPT: $0"

echo "IMPORTANT: this script should be run by the CI (e.g. Shippable) to ensure that the 'samples/' folder is up to date."
echo "Please press CTRL+C to stop or the script will continue in 5 seconds."

sleep 5

# Clear all samples before starting to test against no longer existent files.
echo "Clearing out all samples..."
rm -r ./samples/*

# Lists all samples which are required by pom.xml
# cat pom.xml | grep -P --only-matching "samples/[A-Za-z0-9-/._]+"

# LIST OF SCRIPTS:
declare -a scripts=(
# explicit maven submodules. Those may be duplicated by -all files
"./bin/c-petstore.sh"
"./bin/elm-0.18-petstore.sh"
"./bin/rust-petstore.sh"
"./bin/php-petstore.sh"
"./bin/openapi3/php-petstore.sh"
"./bin/php-slim-server-petstore.sh"
"./bin/javascript-petstore.sh"
"./bin/javascript-es6-petstore.sh"
"./bin/openapi3/javascript-es6-petstore.sh"
"./bin/javascript-promise-petstore.sh"
"./bin/javascript-promise-es6-petstore.sh"
"./bin/javascript-flowtyped-petstore.sh"
"./bin/python-petstore.sh"
"./bin/python-experimental-petstore.sh"
"./bin/python-asyncio-petstore.sh"
"./bin/python-tornado-petstore.sh"
"./bin/openapi3/python-petstore.sh"
"./bin/typescript-node-petstore.sh"
"./bin/typescript-rxjs-petstore.sh"
"./bin/typescript-angular-v4-petstore-with-npm.sh"
"./bin/typescript-angular-v4.3-petstore-with-npm.sh"
"./bin/typescript-angular-v6-petstore-provided-in-root.sh"
"./bin/typescript-angular-v7-petstore-provided-in-root.sh"
"./bin/rust-server-petstore.sh"
"./bin/python-server-aiohttp-petstore.sh"
"./bin/python-server-flask-petstore.sh"
"./bin/python-server-flask-petstore-python2.sh"
# SAMPLES
"./bin/ruby-client-petstore.sh"
"./bin/openapi3/ruby-client-petstore.sh"
"./bin/openapi3/ruby-client-faraday-petstore.sh"
"./bin/java-petstore-all.sh"
"./bin/java-jaxrs-petstore-server-all.sh"
"./bin/java-msf4j-petstore-server.sh"
"./bin/openapi3/jaxrs-jersey-petstore.sh"
"./bin/spring-all-petstore.sh"
"./bin/javascript-petstore-all.sh"
"./bin/kotlin-client-petstore-multiplatform.sh"
"./bin/kotlin-client-petstore.sh"
"./bin/kotlin-client-string.sh"
"./bin/kotlin-client-threetenbp.sh"
"./bin/kotlin-server-petstore.sh"
"./bin/kotlin-springboot-petstore-server.sh"
"./bin/kotlin-springboot-petstore-server-reactive.sh"
"./bin/mysql-schema-petstore.sh"
"./bin/nim-client-petstore.sh"
"./bin/python-petstore-all.sh"
"./bin/php-silex-petstore-server.sh"
"./bin/php-symfony-petstore.sh"
"./bin/php-lumen-petstore-server.sh"
"./bin/php-ze-ph-petstore-server.sh"
"./bin/typescript-angularjs-petstore.sh"
"./bin/typescript-angular-petstore-all.sh"
"./bin/typescript-aurelia-petstore.sh"
"./bin/typescript-axios-petstore-all.sh"
"./bin/typescript-fetch-petstore-all.sh"
"./bin/typescript-inversify-petstore.sh"
"./bin/typescript-jquery-petstore-all.sh"
"./bin/typescript-node-petstore-all.sh"
"./bin/typescript-rxjs-petstore-all.sh"
"./bin/r-petstore.sh"
"./bin/haskell-http-client-petstore.sh"
"./bin/csharp-petstore.sh"
"./bin/csharp-netcore-petstore-all.sh"
"./bin/elixir-petstore.sh"
"./bin/openapi3/go-petstore.sh"
"./bin/go-experimental-petstore.sh"
"./bin/go-petstore.sh"
"./bin/go-petstore-withxml.sh"
"./bin/go-gin-petstore-server.sh"
"./bin/groovy-petstore.sh"
"./bin/apex-petstore.sh"
"./bin/perl-petstore-all.sh"
"./bin/dart-jaguar-petstore.sh"
"./bin/dart-petstore.sh"
"./bin/dart2-petstore.sh"
"./bin/java-play-framework-petstore-server-all.sh"
#"./bin/elm-petstore-all.sh"
"./bin/meta-codegen.sh"
# OTHERS
"./bin/utils/export_docs_generators.sh"
"./bin/utils/copy-to-website.sh"
"./bin/utils/export_generators_readme.sh")

for script in "${scripts[@]}"; do
  if eval $script > /dev/null 2>&1; then
    echo "Executed $script successfully!"
  else
    echo "ERROR: Failed to run $script"
    exit 1
  fi
done

${scriptDir}/postprocess_samples.sh

# Check:
if [ -n "$(git status --porcelain)" ]; then
    echo "UNCOMMITTED CHANGES ERROR"
    echo "There are uncommitted changes in working tree after execution of 'bin/ensure-up-to-date'"
    echo "Perform git diff"
    git --no-pager diff
    echo "Perform git status"
    git status
    echo "Please run 'bin/utils/ensure-up-to-date' locally and commit changes (UNCOMMITTED CHANGES ERROR)"
    exit 1
else
    echo "Git working tree is clean"
fi
